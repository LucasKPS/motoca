// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A delivery route optimization AI agent.
 *
 * - optimizeDeliveryRoute - A function that handles the delivery route optimization process.
 * - OptimizeDeliveryRouteInput - The input type for the optimizeDeliveryRoute function.
 * - OptimizeDeliveryRouteOutput - The return type for the optimizeDeliveryRoute function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const OptimizeDeliveryRouteInputSchema = z.object({
  deliveries: z
    .array(
      z.object({
        id: z.string().describe('The unique identifier for the delivery.'),
        address: z.string().describe('The delivery address.'),
        deadline: z.string().optional().describe('The delivery deadline in ISO format. e.g., 2024-12-31T23:59:59Z'),
      })
    )
    .describe('A list of deliveries to be optimized.'),
  currentLocation: z.string().describe('The current location of the delivery driver.'),
  trafficConditions: z.string().optional().describe('Real-time traffic conditions.'),
  rerouteBasedOnVolume: z.boolean().optional().describe('Whether to reroute deliveries based on the volume of deliveries')
});

export type OptimizeDeliveryRouteInput = z.infer<typeof OptimizeDeliveryRouteInputSchema>;

const OptimizeDeliveryRouteOutputSchema = z.object({
  optimizedRoute: z
    .array(
      z.object({
        id: z.string().describe('The unique identifier for the delivery.'),
        address: z.string().describe('The delivery address.'),
        estimatedArrivalTime: z.string().optional().describe('The estimated arrival time in ISO format. e.g., 2024-12-31T23:59:59Z'),
      })
    )
    .describe('The optimized delivery route.'),
  summary: z.string().describe('A summary of the route optimization.'),
});

export type OptimizeDeliveryRouteOutput = z.infer<typeof OptimizeDeliveryRouteOutputSchema>;

export async function optimizeDeliveryRoute(input: OptimizeDeliveryRouteInput): Promise<OptimizeDeliveryRouteOutput> {
  return optimizeDeliveryRouteFlow(input);
}

const rerouteDeliveries = ai.defineTool({
  name: 'rerouteDeliveries',
  description: 'Reroutes deliveries based on real-time constraints such as volume of deliveries',
  inputSchema: z.object({
    deliveries: z
      .array(
        z.object({
          id: z.string().describe('The unique identifier for the delivery.'),
          address: z.string().describe('The delivery address.'),
          deadline: z.string().optional().describe('The delivery deadline in ISO format. e.g., 2024-12-31T23:59:59Z'),
        })
      )
      .describe('A list of deliveries to be optimized.'),
  }),
  outputSchema: z.object({
    deliveries: z
      .array(
        z.object({
          id: z.string().describe('The unique identifier for the delivery.'),
          address: z.string().describe('The delivery address.'),
          estimatedArrivalTime: z.string().optional().describe('The estimated arrival time in ISO format. e.g., 2024-12-31T23:59:59Z'),
        })
      )
      .describe('The optimized delivery route after considering volume of deliveries'),
  }),
}, async (input) => {
  // Placeholder implementation for rerouting deliveries based on volume.
  // In a real application, this would involve calling an external service
  // or performing calculations to determine the optimal rerouting.
  return {
    deliveries: input.deliveries.map(delivery => ({
      ...delivery,
      estimatedArrivalTime: new Date().toISOString(), // Placeholder ETA
    })),
  };
});

const prompt = ai.definePrompt({
  name: 'optimizeDeliveryRoutePrompt',
  input: {schema: OptimizeDeliveryRouteInputSchema},
  output: {schema: OptimizeDeliveryRouteOutputSchema},
  tools: [rerouteDeliveries],
  prompt: `You are an expert delivery route optimizer. Given a list of deliveries, your current location, and traffic conditions, you will suggest the fastest delivery route.

  Current Location: {{{currentLocation}}}
  Traffic Conditions: {{{trafficConditions}}}

  Deliveries:
  {{#each deliveries}}
  - ID: {{this.id}}, Address: {{this.address}}, Deadline: {{this.deadline}}
  {{/each}}

  {{#if rerouteBasedOnVolume}}
  The delivery driver has the option to reroute deliveries based on volume using the rerouteDeliveries tool. If they want to do so, call the rerouteDeliveries tool.
  {{/if}}

  Optimize the delivery route considering the delivery deadlines and traffic conditions. Provide a summary of the route optimization.
  `,
});

const optimizeDeliveryRouteFlow = ai.defineFlow(
  {
    name: 'optimizeDeliveryRouteFlow',
    inputSchema: OptimizeDeliveryRouteInputSchema,
    outputSchema: OptimizeDeliveryRouteOutputSchema,
  },
  async input => {
    let output;
    if (input.rerouteBasedOnVolume) {
      const promptResult = await prompt({
        ...input,
      });
      output = promptResult.output!;
    } else {
      const promptResult = await prompt({
        ...input,
      });
      output = promptResult.output!;
    }
    return output;
  }
);
