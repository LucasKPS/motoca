rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /customers/{customerId} {
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(customerId);
    }

    match /deliveryCouriers/{deliveryCourierId} {
      allow get: if isSignedIn() && isOwner(deliveryCourierId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(deliveryCourierId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(deliveryCourierId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(deliveryCourierId);
    }

    match /profiles/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    match /deliveryOrders/{deliveryOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}