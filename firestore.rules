/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for Customers and DeliveryCouriers,
 * with denormalized data in DeliveryOrders to enable efficient authorization.
 *
 * @dataStructure
 * - /customers/{customerId}: Stores customer profiles, where customerId must match the Firebase auth UID.
 * - /deliveryCouriers/{deliveryCourierId}: Stores delivery courier profiles, where deliveryCourierId must match the Firebase auth UID.
 * - /deliveryOrders/{deliveryOrderId}: Stores delivery order information with denormalized customer and courier data.
 *
 * @keySecurityDecisions
 * - Customers and DeliveryCouriers can only access their own profiles.
 * - DeliveryOrders are publicly readable, but writes are restricted to authorized users.
 * - Denormalization of Customer and DeliveryCourier data into DeliveryOrder documents avoids costly `get()` calls in security rules.
 *
 * @denormalizationForAuthorization
 * - DeliveryOrder documents contain denormalized customer and courier information to enable authorization rules without requiring `get()` calls to the customer or courier documents.
 *
 * @structuralSegregation
 * - Customer and DeliveryCourier data is segregated into separate collections with path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure customer profiles. Only the customer can read or write their own profile.
     * @path /customers/{customerId}
     * @allow (create) User with UID 'user_abc' creates a new customer profile with ID 'user_abc'.
     * @allow (get) User with UID 'user_abc' reads their own customer profile.
     * @allow (update) User with UID 'user_abc' updates their own customer profile.
     * @allow (delete) User with UID 'user_abc' deletes their own customer profile.
     * @deny (create) User with UID 'user_xyz' attempts to create a customer profile with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' attempts to read customer profile 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /customers/{customerId} {
      // Only signed-in users can access customer data.
      allow get: if isSignedIn() && isOwner(customerId);
      allow list: if false; // Listing customers is not allowed.
      allow create: if isSignedIn() && isOwner(customerId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(customerId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(customerId);
    }

    /**
     * @description Secure delivery courier profiles. Only the courier can read or write their own profile.
     * @path /deliveryCouriers/{deliveryCourierId}
     * @allow (create) User with UID 'courier_abc' creates a new courier profile with ID 'courier_abc'.
     * @allow (get) User with UID 'courier_abc' reads their own courier profile.
     * @allow (update) User with UID 'courier_abc' updates their own courier profile.
     * @allow (delete) User with UID 'courier_abc' deletes their own courier profile.
     * @deny (create) User with UID 'user_xyz' attempts to create a courier profile with ID 'courier_abc'.
     * @deny (get) User with UID 'user_xyz' attempts to read courier profile 'courier_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /deliveryCouriers/{deliveryCourierId} {
      allow get: if isSignedIn() && isOwner(deliveryCourierId);
      allow list: if false; // Listing couriers is not allowed.
      allow create: if isSignedIn() && isOwner(deliveryCourierId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(deliveryCourierId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(deliveryCourierId);
    }

    /**
     * @description Secure delivery orders. Publicly readable, but writes are restricted to authorized users.
     * @path /deliveryOrders/{deliveryOrderId}
     * @allow (get) Any user can read any delivery order.
     * @allow (list) Any user can list delivery orders.
     * @deny (create) An unauthenticated user attempts to create a delivery order.
     * @deny (update) A user attempts to update a delivery order they do not own.
     * @deny (delete) A user attempts to delete a delivery order they do not own.
     * @principle Public read access with owner-only writes.
     */
    match /deliveryOrders/{deliveryOrderId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}